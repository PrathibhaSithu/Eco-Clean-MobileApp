/*import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'dart:io';
import '../models/gatbage.dart';

class GarbageReportGenerator {
  static pw.Document generateGarbageReport(List<GarbageModel> garbageList) {
    final pdf = pw.Document();

    pdf.addPage(
      pw.Page(
        build: (context) =>
            pw.Table.fromTextArray(
          border: pw.TableBorder.all(),
          headerStyle: pw.TextStyle(fontWeight: pw.FontWeight.bold),
          cellStyle: pw.TextStyle(),
          headerDecoration: pw.BoxDecoration(color: PdfColor.fromInt(0xFF4CA547)), // Specify color using PdfColor
          headerAlignment: pw.Alignment.center,
          data: <List<String>>[
            <String>['Garbage Category', 'Amount', 'Date'],
            ...garbageList.map((garbage) => [
              garbage.title,
              '${garbage.amount} Kg',
              '${garbage.date.month}/${garbage.date.day}/${garbage.date.year}',
            ]),
          ],
        ),
      ),
    );

    return pdf;
  }
}*/





import 'package:flutter/material.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'dart:io';
import '../models/gatbage.dart'; // Assuming the correct file name is 'garbage.dart'

class GarbageReportGenerator {
  static pw.Document generateGarbageReport(List<GarbageModel> garbageList) {
    final pdf = pw.Document();

    pdf.addPage(
      pw.Page(

        build: (context) {
          return pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.center,
              children: [
                pw.SizedBox(
                  width: 500, // Adjust width as needed
                  height: 70, // Adjust height as needed
                  child: pw.Container(
                    decoration: pw.BoxDecoration(
                      color: PdfColor.fromInt(0xFF5CD65C), // Set the background color here
                    ),
                    child: pw.Row(
                      mainAxisAlignment: pw.MainAxisAlignment.center,
                      children: [
                        pw.Column(
                          mainAxisAlignment: pw.MainAxisAlignment.center,
                          children: [
                            pw.Text(
                              'Garbage Report',
                              style: pw.TextStyle(fontSize: 18, fontWeight: pw.FontWeight.bold),
                            ),
                            pw.SizedBox(height: 10),
                            pw.Text(
                              'Generated By - Admin',
                              style: pw.TextStyle(fontSize: 14),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),

                pw.SizedBox(height: 100),
                pw.Table.fromTextArray(
                  border: pw.TableBorder.all(),
                  headerStyle: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                  cellStyle: pw.TextStyle(),
                  headerDecoration: pw.BoxDecoration(color: PdfColor.fromInt(0xFF4CA547)),
                  headerAlignment: pw.Alignment.center,
                  data: <List<String>>[
                    <String>['Garbage Category', 'Amount', 'Date'],
                    ...garbageList.map((garbage) => [
                      garbage.title,
                      '${garbage.amount} Kg',
                      '${garbage.date.month}/${garbage.date.day}/${garbage.date.year}',
                    ]),
                  ],
                ),
              ]
          );
        },
      ),
    );

    return pdf;
  }
}



/*class GarbageReportGenerator {
  static pw.Document generateGarbageReport(List<GarbageModel> garbageList) {
    final pdf = pw.Document();

    pdf.addPage(
      pw.Page(
        build: (context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.center,
            children: [
              // Add the image at the center top
              pw.Container(
                alignment: pw.Alignment.center,
                child: pw.Image(PdfImage.file(
                  pdf.document,
                  bytes: File('assets/imges/ecoclean.png').readAsBytesSync(),
                ) as pw.ImageProvider),
              ),
              pw.SizedBox(height: 20), // Adjust as needed
              // Rest of your report content
              pw.SizedBox(
                width: 500, // Adjust width as needed
                height: 70, // Adjust height as needed
                child: pw.Container(
                  decoration: pw.BoxDecoration(
                    color: PdfColor.fromInt(0xFF5CD65C), // Set the background color here
                  ),
                  child: pw.Row(
                    mainAxisAlignment: pw.MainAxisAlignment.center,
                    children: [
                      pw.Column(
                        mainAxisAlignment: pw.MainAxisAlignment.center,
                        children: [
                          pw.Text(
                            'Garbage Report',
                            style: pw.TextStyle(fontSize: 18, fontWeight: pw.FontWeight.bold),
                          ),
                          pw.SizedBox(height: 10),
                          pw.Text(
                            'Generated By - Admin',
                            style: pw.TextStyle(fontSize: 14),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ),
              pw.SizedBox(height: 100),
              pw.Table.fromTextArray(
                border: pw.TableBorder.all(),
                headerStyle: pw.TextStyle(fontWeight: pw.FontWeight.bold),
                cellStyle: pw.TextStyle(),
                headerDecoration: pw.BoxDecoration(color: PdfColor.fromInt(0xFF4CA547)),
                headerAlignment: pw.Alignment.center,
                data: <List<String>>[
                  <String>['Garbage Category', 'Amount', 'Date'],
                  ...garbageList.map((garbage) => [
                    garbage.title,
                    '${garbage.amount} Kg',
                    '${garbage.date.month}/${garbage.date.day}/${garbage.date.year}',
                  ]),
                ],
              ),
            ],
          );
        },
      ),
    );

    return pdf;
  }
}*/
